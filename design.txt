We identified three options for the user interface of the crop function. Our first idea was to get the x,y coordinates of the top-left and bottom-right corners of the rectangle to crop, inputted manually by user through a toplevel window with entry boxes. Our second option was two let the user select the two pixels, the top-left and bottom-right corners of the rectangle, using the cursor via an event bind on the display canvas, and then crop it after the second pixel was selected.

Our third option, and the one we chose, was to let the user make a selection rectangle, where the user selects the tool from the tool bar, then select an area of the screen by clicking and dragging, while the area being selected is shown inside a dashed rectangle, all using a very intricate combination of event binds and canvas functions. This option appealed to us due to its user-friendliness and accessibility, since most users will have prior knowledge on how to use a selection rectangle. The user has the opportunity to actually see what they are selecting, and they can pinpoint the exact pixels of the top-right and bottom-left of the rectangle using the accuracy of the mouse and with the help of the coordinates being displayed real-time on the status bar. They are also informed in real-time, about the size of the rectangle they are selecting, via the dimensions section on the status bar. The selection rectangle was also the fastest way to crop.